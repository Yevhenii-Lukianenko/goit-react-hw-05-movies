{"version":3,"file":"static/js/632.0f25a2df.chunk.js","mappings":"8QAEaA,EAAaC,EAAAA,EAAAA,GAAH,2HAQVC,EAAaD,EAAAA,EAAAA,GAAH,+FAMVE,EAASF,EAAAA,EAAAA,GAAH,gDAING,EAAUH,EAAAA,EAAAA,EAAH,sB,kBChBdI,EAAM,IAAIC,EAAAA,EA8BhB,EA5BoB,WAClB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGACWR,EAAIS,gBAAgBJ,GAD/B,OACbK,EADa,OAEnBN,EAAWM,GAFQ,2CAAH,qDAIlBF,GACD,GAAE,CAACH,KAGF,SAACV,EAAD,UACGQ,EAAQQ,OAAS,EACdR,EAAQS,KAAI,SAAAC,GACV,OACE,UAAChB,EAAD,YACE,SAACC,EAAD,4BAAoBe,EAAOC,WAC3B,SAACf,EAAD,UAAUc,EAAOE,YAFFF,EAAOG,GAK3B,IACD,4CAGT,C,qFC9BDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAAzB,IAEMhB,EAAAA,WACJ,cAAe,eACbiB,KAAKC,OAAS,kCACf,CA2DD,OA3DC,4EAED,6GAE2BF,EAAAA,EAAAA,IAAU,uBAAwB,CACvDG,OAAQ,CACNC,QAASH,KAAKC,UAJtB,cAEUG,EAFV,yBAOWA,EAASC,KAAKC,SAPzB,sCASIC,QAAQC,MAAM,iCAAd,MATJ,gHAFC,IAED,6DAcA,WAAmBC,GAAnB,gGAE2BV,EAAAA,EAAAA,IAAU,gBAAiB,CAChDG,OAAQ,CACNC,QAASH,KAAKC,OACdQ,MAAOA,KALf,cAEUL,EAFV,yBAQWA,EAASC,KAAKC,SARzB,sCAUIC,QAAQC,MAAM,0BAAd,MAVJ,iHAdA,IAcA,gEAeA,WAAsBrB,GAAtB,gGAE2BY,EAAAA,EAAAA,IAAA,iBAAoBZ,GAAW,CACpDe,OAAQ,CACNC,QAASH,KAAKC,UAJtB,cAEUG,EAFV,yBAOWA,EAASC,MAPpB,sCASIE,QAAQC,MAAM,+BAAd,MATJ,iHAfA,IAeA,6DAcA,WAAmBrB,GAAnB,gGAE2BY,EAAAA,EAAAA,IAAA,iBAAoBZ,EAApB,YAAuC,CAC5De,OAAQ,CACNC,QAASH,KAAKC,UAJtB,cAEUG,EAFV,yBAOWA,EAASC,MAPpB,sCASIE,QAAQC,MAAM,+BAAd,MATJ,iHAdA,IAcA,gEAcA,WAAsBrB,GAAtB,gGAE2BY,EAAAA,EAAAA,IAAA,iBAAoBZ,EAApB,YAAuC,CAC5De,OAAQ,CACNC,QAASH,KAAKC,UAJtB,cAEUG,EAFV,yBAOWA,EAASC,KAAKC,SAPzB,sCASIC,QAAQC,MAAM,+BAAd,MATJ,iHAdA,MAcA,EA9DIzB,GA6EN,K","sources":["components/MoviePage/MovieReview/MovieReview.styled.jsx","components/MoviePage/MovieReview/MovieReview.jsx","services/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  margin: 20px auto;\n  width: 1200px;\n`;\n\nexport const ReviewCard = styled.li`\n  padding: 12px;\n  background-color: #4c4c4c;\n  border-radius: 6px;\n`;\n\nexport const Author = styled.h3`\n  margin-bottom: 12px;\n`;\n\nexport const Content = styled.p``;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewList, ReviewCard, Author, Content } from './MovieReview.styled';\nimport API from 'services/api';\nconst api = new API();\n\nconst MovieReview = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      const reviewByMovieId = await api.getMovieReviews(movieId);\n      setReviews(reviewByMovieId);\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <ReviewList>\n      {reviews.length > 0\n        ? reviews.map(review => {\n            return (\n              <ReviewCard key={review.id}>\n                <Author>{`Author: ${review.author}`}</Author>\n                <Content>{review.content}</Content>\n              </ReviewCard>\n            );\n          })\n        : 'We don`t have any reviews for this movie'}\n    </ReviewList>\n  );\n};\n\nexport default MovieReview;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nclass API {\n  constructor() {\n    this.apiKey = 'c4665b1bb83f92274dd3017d4b062627';\n  }\n\n  async getTrendingMovies() {\n    try {\n      const response = await axios.get('/trending/movie/week', {\n        params: {\n          api_key: this.apiKey,\n        },\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error('Error getting trending movies:', error);\n      throw error;\n    }\n  }\n\n  async searchMovies(query) {\n    try {\n      const response = await axios.get('/search/movie', {\n        params: {\n          api_key: this.apiKey,\n          query: query,\n        },\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error('Error searching movies:', error);\n      throw error;\n    }\n  }\n\n  async getMovieDetails(movieId) {\n    try {\n      const response = await axios.get(`/movie/${movieId}`, {\n        params: {\n          api_key: this.apiKey,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting movie details:', error);\n      throw error;\n    }\n  }\n\n  async getMovieCast(movieId) {\n    try {\n      const response = await axios.get(`/movie/${movieId}/credits`, {\n        params: {\n          api_key: this.apiKey,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting movie details:', error);\n      throw error;\n    }\n  }\n\n  async getMovieReviews(movieId) {\n    try {\n      const response = await axios.get(`/movie/${movieId}/reviews`, {\n        params: {\n          api_key: this.apiKey,\n        },\n      });\n      return response.data.results;\n    } catch (error) {\n      console.error('Error getting movie details:', error);\n      throw error;\n    }\n  }\n}\n\nexport default API;\n"],"names":["ReviewList","styled","ReviewCard","Author","Content","api","API","useState","reviews","setReviews","movieId","useParams","useEffect","fetchReviews","getMovieReviews","reviewByMovieId","length","map","review","author","content","id","axios","this","apiKey","params","api_key","response","data","results","console","error","query"],"sourceRoot":""}