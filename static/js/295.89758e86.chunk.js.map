{"version":3,"file":"static/js/295.89758e86.chunk.js","mappings":"6UAEaA,EAAYC,EAAAA,EAAAA,GAAH,2HAQTC,EAAYD,EAAAA,EAAAA,GAAH,yCAITE,EAAQF,EAAAA,EAAAA,IAAH,gEAKLG,EAAOH,EAAAA,EAAAA,GAAH,4CAIJI,EAAgBJ,EAAAA,EAAAA,EAAH,4C,kBCZpBK,EAAM,IAAIC,EAAAA,EAsChB,EApCkB,WAChB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGACSR,EAAIS,aAAaJ,GAD1B,OACbK,EADa,OAEnBN,EAAQM,EAAcP,MAFH,2CAAH,qDAIlBK,GACD,GAAE,CAACH,KAGF,SAACX,EAAD,UACGS,EAAKQ,KAAI,SAAAC,GACR,OACE,UAAChB,EAAD,YACE,SAACC,EAAD,CACEgB,IACED,EAAME,aAAN,yCACsCF,EAAME,cACxCC,EAENC,IAAKJ,EAAMK,QAEb,SAACnB,EAAD,UAAOc,EAAMK,OACZL,EAAMM,YACL,SAACnB,EAAD,+BAA8Ba,EAAMM,eAXxBN,EAAMK,KAezB,KAGN,C,+FC5CDE,EAAAA,EAAAA,SAAAA,QAAyB,+BAAzB,IAEMlB,EAAAA,WACJ,cAAe,eACbmB,KAAKC,OAAS,kCACf,CA2DD,OA3DC,4EAED,6GAE2BF,EAAAA,EAAAA,IAAU,uBAAwB,CACvDG,OAAQ,CACNC,QAASH,KAAKC,UAJtB,cAEUG,EAFV,yBAOWA,EAASC,KAAKC,SAPzB,sCASIC,EAAAA,OAAAA,QAAA,gDATJ,gHAFC,IAED,6DAcA,WAAmBC,GAAnB,gGAE2BT,EAAAA,EAAAA,IAAU,gBAAiB,CAChDG,OAAQ,CACNC,QAASH,KAAKC,OACdO,MAAOA,KALf,cAEUJ,EAFV,yBAQWA,EAASC,KAAKC,SARzB,sCAUIC,EAAAA,OAAAA,QAAA,yCAVJ,iHAdA,IAcA,gEAeA,WAAsBtB,GAAtB,gGAE2Bc,EAAAA,EAAAA,IAAA,iBAAoBd,GAAW,CACpDiB,OAAQ,CACNC,QAASH,KAAKC,UAJtB,cAEUG,EAFV,yBAOWA,EAASC,MAPpB,sCASIE,EAAAA,OAAAA,QAAA,sCATJ,iHAfA,IAeA,6DAcA,WAAmBtB,GAAnB,gGAE2Bc,EAAAA,EAAAA,IAAA,iBAAoBd,EAApB,YAAuC,CAC5DiB,OAAQ,CACNC,QAASH,KAAKC,UAJtB,cAEUG,EAFV,yBAOWA,EAASC,MAPpB,sCASIE,EAAAA,OAAAA,QAAA,2CATJ,iHAdA,IAcA,gEAcA,WAAsBtB,GAAtB,gGAE2Bc,EAAAA,EAAAA,IAAA,iBAAoBd,EAApB,YAAuC,CAC5DiB,OAAQ,CACNC,QAASH,KAAKC,UAJtB,cAEUG,EAFV,yBAOWA,EAASC,KAAKC,SAPzB,sCASIC,EAAAA,OAAAA,QAAA,6CATJ,iHAdA,MAcA,EA9DI1B,GA6EN,K","sources":["components/MoviePage/MovieCast/MovieCast.styled.jsx","components/MoviePage/MovieCast/MovieCast.jsx","services/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ActorList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 20px 0;\n  gap: 24px;\n`;\n\nexport const ActorCard = styled.li`\n  width: 150px;\n`;\n\nexport const Photo = styled.img`\n  object-fit: cover;\n  height: 225px;\n`;\n\nexport const Name = styled.h3`\n  font-size: 16px;\n`;\n\nexport const CharacterName = styled.p`\n  font-size: 12px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport defaultUserImg from '../../../images/userDefaultImg.png';\nimport {\n  ActorList,\n  ActorCard,\n  Photo,\n  Name,\n  CharacterName,\n} from './MovieCast.styled';\nimport API from 'services/api';\nconst api = new API();\n\nconst MovieCast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      const castByMovieId = await api.getMovieCast(movieId);\n      setCast(castByMovieId.cast);\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <ActorList>\n      {cast.map(actor => {\n        return (\n          <ActorCard key={actor.name}>\n            <Photo\n              src={\n                actor.profile_path\n                  ? `https://image.tmdb.org/t/p/w400${actor.profile_path}`\n                  : defaultUserImg\n              }\n              alt={actor.name}\n            />\n            <Name>{actor.name}</Name>\n            {actor.character && (\n              <CharacterName>{`Character: ${actor.character}`}</CharacterName>\n            )}\n          </ActorCard>\n        );\n      })}\n    </ActorList>\n  );\n};\n\nexport default MovieCast;\n","import axios from 'axios';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nclass API {\n  constructor() {\n    this.apiKey = 'c4665b1bb83f92274dd3017d4b062627';\n  }\n\n  async getTrendingMovies() {\n    try {\n      const response = await axios.get('/trending/movie/week', {\n        params: {\n          api_key: this.apiKey,\n        },\n      });\n      return response.data.results;\n    } catch (error) {\n      Notify.failure(`Error getting trending movies: ${error}`);\n      throw error;\n    }\n  }\n\n  async searchMovies(query) {\n    try {\n      const response = await axios.get('/search/movie', {\n        params: {\n          api_key: this.apiKey,\n          query: query,\n        },\n      });\n      return response.data.results;\n    } catch (error) {\n      Notify.failure(`Error searching movies: ${error}`);\n      throw error;\n    }\n  }\n\n  async getMovieDetails(movieId) {\n    try {\n      const response = await axios.get(`/movie/${movieId}`, {\n        params: {\n          api_key: this.apiKey,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      Notify.failure(`Error getting movie: ${error}`);\n      throw error;\n    }\n  }\n\n  async getMovieCast(movieId) {\n    try {\n      const response = await axios.get(`/movie/${movieId}/credits`, {\n        params: {\n          api_key: this.apiKey,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      Notify.failure(`Error getting movie cast: ${error}`);\n      throw error;\n    }\n  }\n\n  async getMovieReviews(movieId) {\n    try {\n      const response = await axios.get(`/movie/${movieId}/reviews`, {\n        params: {\n          api_key: this.apiKey,\n        },\n      });\n      return response.data.results;\n    } catch (error) {\n      Notify.failure(`Error getting movie review: ${error}`);\n      throw error;\n    }\n  }\n}\n\nexport default API;\n"],"names":["ActorList","styled","ActorCard","Photo","Name","CharacterName","api","API","useState","cast","setCast","movieId","useParams","useEffect","fetchReviews","getMovieCast","castByMovieId","map","actor","src","profile_path","defaultUserImg","alt","name","character","axios","this","apiKey","params","api_key","response","data","results","Notify","query"],"sourceRoot":""}